import { create } from "zustand";
import { persist } from "zustand/middleware";
import { CustomerInfo, PaymentInfo, Product } from "@/Types";

interface OrderData {
  orderId: string;
  total: number;
  products: Product[];
  customerInfo: CustomerInfo;
  paymentInfo: PaymentInfo;
  createdAt: Date;
}

interface OrderStore {
  orderData: OrderData | null;
  orderHistory: OrderData[]; // âœ… Yeni: SipariÅŸ geÃ§miÅŸi
  setOrderData: (data: OrderData) => void;
  addToOrderHistory: (data: OrderData) => void; // âœ… Yeni: GeÃ§miÅŸe ekle
  clearOrderData: () => void;
  getOrderHistory: () => OrderData[]; // âœ… Yeni: GeÃ§miÅŸi getir
}

export const useOrderStore = create<OrderStore>()(
  persist(
    (set, get) => ({ // set: state'i gÃ¼ncelle, get: mevcut state'i oku
      orderData: null, // Mevcut sipariÅŸ verisi (tek sipariÅŸ)
      orderHistory: [], // TÃ¼m sipariÅŸlerin geÃ§miÅŸi (array)
      
      setOrderData: (data) => set({ orderData: data }), // Mevcut sipariÅŸi gÃ¼ncelle
      clearOrderData: () => set({ orderData: null }), // Mevcut sipariÅŸi temizle
      
      addToOrderHistory: (data) => { //  Yeni sipariÅŸi geÃ§miÅŸe ekle
        const currentHistory = get().orderHistory; //  Mevcut geÃ§miÅŸi oku
        set({ orderHistory: [...currentHistory, data] }); //  Yeni sipariÅŸi ekle
      },

      getOrderHistory: () => get().orderHistory, //  TÃ¼m sipariÅŸ geÃ§miÅŸini getir
    }),
    { name: `order-storage` } // ğŸ’¾localStorage'da saklanacak key
  )
);
